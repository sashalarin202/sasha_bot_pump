// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
const TelegramBot = require('node-telegram-bot-api');
const WebSocket = require('ws');
const axios = require('axios');

// –£–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ (–µ–≥–æ –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —á–µ—Ä–µ–∑ BotFather)
const token = '7563734754:AAFodzj0uwVJ-t5NkN5LQlBS_VlbqUFB1Lw';
const bot = new TelegramBot(token, { polling: true });

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
let priceDifference, trackingPeriod, repeatFrequency;
let isSessionActive = false;
let socket = null;
const trackedTokens = new Map();
const AUTH_CODE = '123456';
const authorizedUsers = new Set();

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–π —Ü–µ–Ω—ã —Ç–æ–∫–µ–Ω–∞
async function getHistoricalPrice(symbol, minutesAgo) {
  try {
    const response = await axios.get(`https://api.binance.com/api/v3/klines`, {
      params: {
        symbol: symbol,
        interval: '1m',
        limit: minutesAgo + 1
      }
    });
    const historicalCandle = response.data[0];
    return parseFloat(historicalCandle[1]); // –¶–µ–Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–π —Ü–µ–Ω—ã –¥–ª—è ${symbol}: ${error.message}`);
    return null;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è
function getNextNotificationTime() {
  return Date.now() + repeatFrequency * 60000;
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;

  if (!authorizedUsers.has(chatId)) {
    bot.sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:");
    bot.once('message', (msg) => {
      if (msg.text === AUTH_CODE) {
        authorizedUsers.add(chatId);
        bot.sendMessage(chatId, "–ö–æ–¥ –ø—Ä–∏–Ω—è—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start —Å–Ω–æ–≤–∞.");
      } else {
        bot.sendMessage(chatId, "–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.");
      }
    });
    return;
  }

  console.log(`–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç —á–∞—Ç–∞ ${chatId}`);

  if (isSessionActive) {
    bot.sendMessage(chatId, "–°–µ—Å—Å–∏—è —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stop –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.");
    return;
  }

  isSessionActive = true;
  bot.sendMessage(chatId, "–ü—Ä–∏–≤–µ—Ç! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ä–∞–∑–Ω–∏—Ü—É –≤ —Ü–µ–Ω–µ (–≤ %):");

  bot.once('message', (msg) => {
    priceDifference = parseFloat(msg.text);
    bot.sendMessage(chatId, "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è (–≤ –º–∏–Ω—É—Ç–∞—Ö):");

    bot.once('message', (msg) => {
      trackingPeriod = parseFloat(msg.text);
      bot.sendMessage(chatId, "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —á–∞—Å—Ç–æ—Ç—É –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π –æ–ø–æ–≤–µ—â–µ–Ω–∏–π (–≤ –º–∏–Ω—É—Ç–∞—Ö):");

      bot.once('message', async (msg) => {
        repeatFrequency = parseFloat(msg.text);
        bot.sendMessage(chatId, "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –û–∂–∏–¥–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π...");

        socket = new WebSocket('wss://stream.binance.com:9443/ws/!ticker');

        socket.on('open', () => {
          bot.sendMessage(chatId, "–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Binance —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!");
          console.log("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Binance —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.");
        });

        socket.on('message', async (data) => {
          try {
            const ticker = JSON.parse(data);
            if (ticker.s && ticker.s.endsWith('USDT')) {
              const token = ticker.s;
              const currentPrice = parseFloat(ticker.c);

              if (!trackedTokens.has(token)) {
                const initialPrice = await getHistoricalPrice(token, trackingPeriod);
                if (initialPrice !== null) {
                  trackedTokens.set(token, {
                    initialPrice: initialPrice,
                    nextNotificationTime: 0,
                  });
                }
              }

              const tokenData = trackedTokens.get(token);
              if (tokenData) {
                const priceChange = ((currentPrice - tokenData.initialPrice) / tokenData.initialPrice) * 100;
                let action = '';
                if (priceChange >= priceDifference && Date.now() >= tokenData.nextNotificationTime) {
                  action = 'üü¢Long';
                } else if (priceChange <= -priceDifference && Date.now() >= tokenData.nextNotificationTime) {
                  action = 'üî¥Short';
                }

                if (action) {
                  const message = `Binance\n${action} ${token}\n–¶–µ–Ω–∞ ${currentPrice.toFixed(6)}\n–ü—Ä–æ—Ü–µ–Ω—Ç –∏–∑–º–µ–Ω–∏–ª—Å—è –Ω–∞ ${priceChange.toFixed(2)}%\n[–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ Binance](https://www.binance.com/en/trade/${token})`;
                  bot.sendMessage(
                    chatId, 
                    message.replace(/\./g, '\\.').replace(/-/g, '\\-'), 
                    { parse_mode: 'MarkdownV2' }
                  );
                  trackedTokens.set(token, {
                    initialPrice: currentPrice, 
                    nextNotificationTime: getNextNotificationTime(),
                  });
                }
              }
            }
          } catch (error) {
            console.error(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö: ${error.message}`);
          }
        });

        socket.on('error', (error) => {
          bot.sendMessage(chatId, `–û—à–∏–±–∫–∞ WebSocket: ${error.message}`);
          console.error(`–û—à–∏–±–∫–∞ WebSocket: ${error.message}`);
        });
      });
    });
  });
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stop
bot.onText(/\/stop/, (msg) => {
  const chatId = msg.chat.id;
  if (!isSessionActive || !socket) {
    bot.sendMessage(chatId, "–°–µ—Å—Å–∏—è —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏–ª–∏ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞.");
    return;
  }

  socket.close();
  socket = null;
  isSessionActive = false;
  bot.sendMessage(chatId, "–°–µ—Å—Å–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–æ–≤–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.");
  console.log("–°–µ—Å—Å–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.");
});
